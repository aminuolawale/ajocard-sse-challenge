// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/status/status.proto

package status

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status struct {
	Active               bool     `protobuf:"varint,1,opt,name=Active,proto3" json:"Active,omitempty"`
	FailureRate          float32  `protobuf:"fixed32,2,opt,name=FailureRate,proto3" json:"FailureRate,omitempty"`
	FailureThreshold     float32  `protobuf:"fixed32,3,opt,name=FailureThreshold,proto3" json:"FailureThreshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7c23edb9f2ac614, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Status) GetFailureRate() float32 {
	if m != nil {
		return m.FailureRate
	}
	return 0
}

func (m *Status) GetFailureThreshold() float32 {
	if m != nil {
		return m.FailureThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*Status)(nil), "status.Status")
}

func init() {
	proto.RegisterFile("grpc/status/status.proto", fileDescriptor_b7c23edb9f2ac614)
}

var fileDescriptor_b7c23edb9f2ac614 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x86, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x6c, 0x10, 0x9e, 0x52, 0x1e, 0x17, 0x5b, 0x30, 0x98, 0x25, 0x24, 0xc6, 0xc5, 0xe6, 0x98, 0x5c,
	0x92, 0x59, 0x96, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe5, 0x09, 0x29, 0x70, 0x71,
	0xbb, 0x25, 0x66, 0xe6, 0x94, 0x16, 0xa5, 0x06, 0x25, 0x96, 0xa4, 0x4a, 0x30, 0x01, 0x25, 0x99,
	0x82, 0x90, 0x85, 0x84, 0xb4, 0xb8, 0x04, 0xa0, 0xdc, 0x90, 0x8c, 0xa2, 0xd4, 0xe2, 0x8c, 0xfc,
	0x9c, 0x14, 0x09, 0x66, 0xb0, 0x32, 0x0c, 0x71, 0x23, 0x3b, 0x2e, 0x5e, 0x88, 0x7d, 0xc1, 0xa9,
	0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xba, 0x5c, 0x9c, 0xee, 0xa9, 0x25, 0x50, 0x37, 0xf0, 0xe9,
	0x41, 0x1d, 0x09, 0xe1, 0x4b, 0xa1, 0xf1, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0xce, 0x37, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x7f, 0xde, 0x16, 0xf3, 0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	GetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Status, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) GetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/status.StatusService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	GetStatus(context.Context, *Status) (*Status, error)
}

// UnimplementedStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (*UnimplementedStatusServiceServer) GetStatus(ctx context.Context, req *Status) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _StatusService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/status/status.proto",
}
